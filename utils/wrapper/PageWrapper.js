import Wrapper from "@/utils/wrapper/withAuthWrapper";
import CreateEvent from "@/parts/withAuth/dashboard/create_event";
import React, {
    useEffect,
    useState,
    useCallback,
    useLayoutEffect,
    useRef,
    useReducer
} from "react";
import {useDispatch, useSelector} from "react-redux";
import styles from "@/styles/withAuth/dashboard.module.scss";
import User_Profile from "@/parts/withAuth/dashboard/user_profile";
import My_Space from "@/parts/withAuth/dashboard/my_space";
import Trending from "@/parts/withAuth/dashboard/trending";
import Footer from "@/parts/withAuth/footer";
import Create_Post from "@/parts/withAuth/dashboard/create_post";
import Single_Feed from "@/parts/withAuth/dashboard/single_feed";
import EmptyFeed from "@/parts/withAuth/dashboard/empty_feed";
import Suggested_Family from "@/parts/withAuth/dashboard/suggested_family";
import Upcoming_Events from "@/parts/withAuth/dashboard/upcoming_events";
import CreateFamily from "@/parts/withAuth/dashboard/create_family";
import AnswerQuestion from "@/parts/withAuth/family_search/answer_question/index";
import SendRequest from "@/parts/withAuth/family_search/send_request";
import HttpService from "@/service/httpServices";
import PostSkeleton from "@/components/skeletons/post";
import {useInfiniteScroll} from "@/utils/useInfiniteScroll";
import CircularLoader from "@/components/loaders/circular";
import {middleWareServersideProps} from "@/middleware";
import Feeds from "@/parts/reuseSection/feeds";

const PageWrapper = (props) => {
    // console.log

    // const suggestedFamilyResult = useSelector((state) => state.suggested_family);


    const dispatch = useDispatch();
    const [showModal, setShowModal] = useState(false);
    const [showModal3, setShowModal3] = useState(false);
    const [showModal2, setShowModal2] = useState(false);
    const [familySelected, setFamilySelected] = useState({});
    const [feedsData, setFeedsData] = useState([]);
    const [pagination, setPagination] = useState({
        currentPage: 0,
        nextPage: 0,
        pageSize: 2,
        totalRecords: 0,
    });
    const [status, setStatus] = useState("loading");
    const [createUpdateState, setCreateUpdateState] = useReducer(s => s, "loading");
    const [loadMoreStatus, setLoadMoreStatus] = useState("");

    const [updatePost, setUpdatePost] = useReducer(s => !s, false);
    const [selectedPost, setSelectedPost] = useState("");
    const check_suggestedFamily = useSelector((state) => state.suggested_family);
    const [showCreateEvent, setShowCreateEvent] = useState(false);

    const createFamilyButton = (family) => {
        console.log(family);
        setFamilySelected(family);
        setShowModal(true);
    };

    const joinFamilyButton = (family) => {
        console.log(family);
        setFamilySelected(family);
        setShowModal3(true);
    };
    const createFamilyCloseButton = () => {
        setShowModal(false);
    };

    const getUserPosts = () => {
        const http = new HttpService();
        http
            .getData(`/posts/get-user-posts?size=${pagination.pageSize}&familyId=`)
            .then((res) => {
                const {content, currentPage, nextPage, pageSize, totalRecords} =
                    res.data.data;
                setFeedsData(content);
                setPagination({
                    ...pagination,
                    currentPage,
                    nextPage,
                    pageSize,
                    totalRecords,
                });
                setStatus("success");
                setLoadMoreStatus("success");
            })
            .catch((err) => console.log("error", err));
    };

    const lastItemRef = useInfiniteScroll({
        isFetching: status === "loading",
        hasMore: feedsData.length < Number(pagination.totalRecords),
        onLastIndexScrollView: () => {
            setLoadMoreStatus("loading");
            setPagination({
                ...pagination,
                pageSize: pagination.pageSize + pagination.pageSize,
            });
        },
    });

    const handleEditPost = (val) => {
        setSelectedPost(val);
        setUpdatePost();
    }

    useEffect(() => {
        if (createUpdateState == 'done') {
            getUserPosts();
        }
    }, [createUpdateState])


    const updateFeed = (data) => {
        // get array of feeds and update
        const copyData = [...feedsData];
        let foundIndex = copyData.findIndex((feed) => feed.id === data.id);
        console.log("foundIndex", foundIndex);
        copyData[foundIndex] = data;
        setFeedsData(copyData);
    };
    useEffect(() => {
        getUserPosts();
    }, [pagination.pageSize]);

    return (
        <>
            <Head>
                <title> Realcousins | {props.title}</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon_io/favicon.ico"/>
            </Head>
            <Wrapper>
                <main className={styles.main}>
                    <div className={styles.main_wrapper}>
                        <aside className={styles.left_wrap}>
                            <section className={styles.left_wrap_body}>
                                <div className={styles.user_profile_wrap}>
                                    <User_Profile createFamilyButton={createFamilyButton}/>
                                </div>
                                <div className={styles.my_space_wrap}>
                                    <My_Space/>
                                </div>
                                <div className={styles.tap_suggested_family_wrap}>
                                    <Tablet_Suggested_Family
                                        joinFamilyButton={joinFamilyButton}
                                    />
                                </div>
                                <div className={styles.trending_wrap}>
                                    <Trending/>
                                </div>
                                <div className={styles.tap_upcoming_event_wrap}>
                                    <Tablet_Upcoming_Event/>
                                </div>
                                <div className={styles.footer_wrap}>
                                    <Footer/>
                                </div>
                            </section>
                        </aside>
                        <section className={styles.center_wrap}>
                            {props.children}
                        </section>
                        <section
                            className={styles.right_wrap}
                            style={{
                                display:
                                    check_suggestedFamily?.result?.data?.content.length === 0
                                        ? "block"
                                        : "flex",
                            }}
                        >
                            <div className={styles.suggested_family_wrap}>
                                {/* {suggestedFamilyResult?.result?.data?.content.length !== 0  && <Suggested_Family joinFamilyButton={joinFamilyButton} />} */}
                                <Suggested_Family joinFamilyButton={joinFamilyButton}/>
                            </div>
                            <div className={styles.upcoming_event_wrap}>
                                <Upcoming_Events setShowCreateEvent={setShowCreateEvent}/>
                            </div>
                        </section>
                    </div>
                </main>
            </Wrapper>

            <>
                {showModal && (
                    <Modal>
                        <CreateFamily
                            setShowModal={setShowModal}
                            closeButton={createFamilyCloseButton}
                            joinFamilyButton={joinFamilyButton}
                        />
                    </Modal>
                )}

                {showModal3 && (
                    <Modal>
                        <AnswerQuestion
                            family={familySelected}
                            setShowModal={setShowModal3}
                            closeButton={createFamilyCloseButton}
                        />

                        {/* <CreateFamily
              setShowModal={setShowModal}
              closeButton={createFamilyCloseButton}
            /> */}
                    </Modal>
                )}
                {showModal2 && (
                    <Modal>
                        <SendRequest
                            setShowModal={setShowModal2}
                            closeButton={joinThroughCloseButton}
                        />

                        {/* <CreateFamily
                      setShowModal={setShowModal}
                      closeButton={createFamilyCloseButton}
                    /> */}
                    </Modal>
                )}
                {showCreateEvent && (
                    <Modal>
                        <CreateEvent
                            setShowModal={setShowCreateEvent}
                            // closeButton={joinThroughCloseButton}
                        />
                    </Modal>
                )}
            </>
        </>
    );
};

export default PageWrapper;

// import fsPromises from "fs/promises";
// import path from "path";
import Tablet_Suggested_Family from "@/parts/withAuth/dashboard/tap_suggested_family";
import Tablet_Upcoming_Event from "@/parts/withAuth/dashboard/tap_upcoming_event";
import Modal from "@/components/modal";
import Head from "next/head";


export function getServerSideProps(ctx) {
  return {
    ...middleWareServersideProps(ctx),
    props: {},
  };
}
